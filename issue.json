{
  "title": "Implement Monkey Console Application",
  "body": "## Overview\nWe need to implement a C# console application that manages monkey species data with an interactive menu system.\n\n## Requirements\n- Create a C# console app that can list all available monkeys\n- Get details for a specific monkey by name\n- Pick a random monkey\n- The app should use a Monkey model class\n- Include ASCII art for visual appeal\n\n## Implementation Details\nThis console application should provide an intuitive user interface for exploring monkey data. The application will integrate with the Monkey MCP server to fetch real monkey species information.\n\n### Key Components Needed:\n1. **Monkey Model Class**: A data model to represent monkey species with properties like Name, Location, Population, etc.\n2. **MonkeyHelper Class**: A static helper class to manage monkey data operations\n3. **Interactive Menu System**: A user-friendly console interface\n4. **ASCII Art Integration**: Fun visual elements to enhance user experience\n\n## Implementation Checklist\n- [ ] Create a Monkey model class with appropriate properties\n- [ ] Implement MonkeyHelper static class with the following methods:\n  - [ ] GetAllMonkeys() - retrieve all available monkeys\n  - [ ] GetRandomMonkey() - select a random monkey\n  - [ ] GetMonkeyByName(string name) - find specific monkey by name\n  - [ ] Track access count for random monkey selections\n- [ ] Update Program.cs with interactive menu offering:\n  - [ ] Option 1: List all monkeys\n  - [ ] Option 2: Get details for a specific monkey by name\n  - [ ] Option 3: Get a random monkey\n  - [ ] Option 4: Exit application\n- [ ] Add ASCII art that displays randomly for visual appeal\n- [ ] Integrate with Monkey MCP server for data retrieval\n- [ ] Implement proper error handling and user input validation\n- [ ] Add appropriate console formatting and colors for better UX\n\n## Technical Considerations\n- Follow C# coding standards and conventions\n- Use async/await patterns where appropriate\n- Implement proper exception handling\n- Ensure the application is user-friendly and intuitive\n\n## Acceptance Criteria\n- Application compiles and runs without errors\n- All menu options work correctly\n- Data is successfully retrieved from Monkey MCP server\n- ASCII art enhances the visual appeal\n- Code follows established coding standards and best practices",
  "labels": [
    "enhancement",
    "good first issue"
  ]
}